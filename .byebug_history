exit
@y
@x
exit
robot.report
exit
nswe[@f.downcase]
exit
@f
nswe[@f]
nswe[@f].downcase
exit
nswe[@f]
@f
@position
@f
exit
@position
c
@position
c
@position
exit
@f
exit
nswe[@f]
@f
exit
robot.report
c
@f
nswe[@f]
progress
report
exit
robot.report
c
robot.report
c
robot.report
exit
key
key[1, 0]
key[0, 0]
key[1, 0]
key(1, -1)
key[1, -1]
key = input.keys
input.keys
input
c
robot.move
c
exit
place_robot "PLACE 0,0,N"
place_robot input
input
exit
place_robot input
input
exit
input['input_1']
input
input[:input_1]
exit
robot.report
exit
move_a_unit
exit
move_a_unit
exit
move_a_unit
exit
robot.right
robot.left
exit
robot.left
exit
exut
nswe[@f]
exit
nswe[:'e']
nswe['e':]
nswe['e']
@f
nswe[@f]
exit
valid_position
@x
exit
x
exit
x
exit
send(to_move) = 1
exit
@x
exit
send(to_move)
exit
send(to_move)
to_move
exit
direction
exit
direction
exit
direction
exit
direction
exit
face
exit
c
face
c
exit
valid_position(x,'y')
valid_position(x,y) && valid_point(f)
valid_position(x,y)
exit
(0..5).include?('s')
exit
('0'..'5').include? x
(0..5).include? x
x = x
x
(0..5).include? x
(0..5).include? y
(0..5).include? 0
exit
y
x
valid_position(x,y)
exit
valid?
exit
@errors
exit
c
valid_position(x,y)
exit
@errors.nil?
valid?
@error
exit
robot.valid?
obot.valid?
exit
valid_position(x,y) && valid_point(f)
if valid_position(x,y) && valid_point(f)
exit
valid_position(x,y) && valid_point(f)
valid_point(f)
valid_position(x,y)
exit
valid_point('E')
valid_point('e')
valid_point('3')
valid_point('b')
valid_point(f)
f
valid_point(f)
exit
two
one
one, two = [2,3]
one, two = 1,2
face
exit
f
y
x
exit
position
command
exit
command[0].downcase.eql? 'place'
command.downcase.eql? 'place'
command[0].downcase
command[0].downcase!
command[0]
command[0].downcase!
command = @command.split
c
exit
@command.split
@command
c
here
c
here
c
here
c
here
c
exit
x
exit
x
exit
robot
